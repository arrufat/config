# User preferences
# ────────────────

set-option global startup_info_version 20221031
set-option global grepcmd 'rg --column --smart-case --sort path --line-buffered'
set-option global ui_options terminal_assistant=none terminal_status_on_top=true
add-highlighter global/ show-matching
add-highlighter global/todos regex '(//|#|/\*)\h*(TODO|WARNING|FIXME)[:]?[^\n]*' 2:+bu
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:,,white+c }
hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor }

# Enable editor config
# ────────────────────

hook global WinCreate ^[^*]+$ %{ editorconfig-load }

# Extra editor commands
# ─────────────────────

define-command clean-selections -docstring 'Replace tabs with spaces and trim trailing whitespace' %{ try %{
    execute-keys -draft @s\h+$<ret>d
} }
define-command clean-buffer -docstring 'Replace tabs with spaces and trim trailing whitespace' %{ try %{
    execute-keys -draft \%@s\h+$<ret>d
} }

# clear search highlighter
define-command nohlsearch -docstring 'clear the search register' %{ set-register slash '' }
alias global nohl nohlsearch

# Bring back <c-a> and <c-x> from Vim to increment/decrement the number under the cursor
define-command -hidden -params 2 inc %{ try %{
    evaluate-commands %sh{
        [ "$1" = 0 ] && count=1 || count="$1"
        printf '%s%s' 'exec h"_/\d<ret><a-i>na' "$2($count)<esc>|{<space>cat<semicolon>echo<semicolon>}|bc<ret>"
    }
} catch %{
    execute-keys l
}}
map global normal <c-a> ': inc %val{count} +<ret>'
map global normal <c-x> ': inc %val{count} -<ret>'


# Preview line in buffer (numb.nvim-like)
# ───────────────────────────────────────
declare-option -hidden int-list jump_back_line
define-command -override -hidden jump-to-line %{
    set-option global jump_back_line %val{cursor_line} %val{cursor_char_column}
    prompt ':' nop \
        -on-abort %{
            edit %val{bufname} %opt{jump_back_line}
        } \
        -on-change %{
            try %{ edit %val{bufname} %val{text} }
        }
}

# Use tab for indentation in insert mode
# ──────────────────────────────────────
hook global InsertChar \t %{ try %{
     execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
}}
hook global InsertDelete ' ' %{ try %{
    execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
}}

# Other commands
# ──────────────

# run external commands in a shell and show the output in an info box
define-command sh -docstring "run a shell command" -params .. %{ info -title "%arg{@}" %sh{${@} 2>&1 } }
complete-command sh shell

# Qalculate
define-command qalc -docstring "compute equation with Qalculate!" -params .. %{ info -title "qalc" %sh{qalc ${@}} }
complete-command qalc shell-script-candidates %{
    { echo $(qalc +u8 --list-functions | head -n -3);
      echo $(qalc +u8 --list-variables | head -n -3); } | tr ' ' '\n' | sort -u
}

# File management
# ───────────────

# nnn
# ───
declare-option str kak_open "%val{config}/kak_open"
define-command nnn -docstring "open nnn" -params .. %{
    terminal sh -c "NNN_OPENER=%opt{kak_open} KAK_SESSION=%val{session} KAK_CLIENT=%val{client} nnn %arg{@}"
}
complete-command nnn file

# broot
# ─────
define-command broot -docstring "open broot" -params .. %{
    terminal sh -c "EDITOR=%opt{kak_open} KAK_SESSION=%val{session} KAK_CLIENT=%val{client} broot %arg{@}"
}
complete-command broot file

# fuzzy finders
# ─────────────
define-command find -docstring "find files" -params 1 %{ edit %arg{1} }
complete-command find shell-script-candidates %{ find . -type f }
alias global f find

# Various mappings
# ────────────────

map global insert <s-ret> <ret>
map global normal '#' ': comment-line<ret>'
map global normal '<a-#>' '_: comment-block<ret>'
map global normal = ': prompt math: %{exec "a%val{text}<lt>esc>|{ cat; echo; }|bc<lt>ret>"}<ret>'
map global normal '<a-=>' ': prompt qalc: %{exec "a%val{text}<lt>esc>|qalc -t -u8 -f -<lt>ret>"}<ret>'
map -docstring "xml tag object" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}
map -docstring 'extend lines downwards' global normal X %{:exec "<lt>a-:>%val{count}F<lt>ret>x"<ret>}
map -docstring 'extend lines upwards' global normal <a-X> %{:exec "<lt>a-:><lt>a-;><lt>a-H>%val{count}Kx"<ret>}

# Diff buffers
# ────────────

define-command diff-buffers -override -params 2 %{
    evaluate-commands %sh{
        file1=$(mktemp)
        file2=$(mktemp)
        echo "
            evaluate-commands -buffer '$1' write -force $file1
            evaluate-commands -buffer '$2' write -force $file2
            edit! -scratch *diff-buffers*
            set-option buffer filetype diff
            set-register | 'diff -u $file1 $file2; rm $file1 $file2'
            execute-keys !<ret>gg
        "
}}

complete-command diff-buffers buffer

# User modes
# ──────────

declare-user-mode repl
map global repl -docstring 'evaluate' e ':repl-send-text<ret>'
map global repl -docstring 'bash' b ':repl-new bash<ret>'
map global repl -docstring 'julia' j ':repl-new julia<ret>'
map global repl -docstring 'ipython' p ':repl-new ipython<ret>'
map global repl -docstring 'qalc' q ':repl-new qalc<ret>'

declare-user-mode zenity
map global zenity -docstring 'open file' o ':edit %sh{cd $(dirname $kak_buffile); zenity --file-selection}<ret>'
map global zenity -docstring 'select color' c '!zenity --color-selection<ret>'

declare-user-mode spell
map global spell -docstring 'spelling' s ':spell<ret>'
map global spell -docstring 'add' a ':spell-add<ret>'
map global spell -docstring 'next' n ':spell-next<ret>'
map global spell -docstring 'clear' c ':spell-clear<ret>'

declare-user-mode qalc
map global qalc -docstring 'exact mode' e ':try %{ nop %sh{qalc -set exact}}<ret>'
map global qalc -docstring 'approximate mode' a ':try %{ nop %sh{qalc -set approx}}<ret>'
map global qalc -docstring 'update exchange rates' x ':try %{ nop %sh{qalc -exrates}}<ret>'

map global user -docstring 'enable autocomplete' a ':set-option -add buffer autocomplete insert<ret>'
map global user -docstring 'disable autocomplete' A ':set-option -remove buffer autocomplete insert<ret>'
map global user -docstring 'edit kakrc' e ':e ~/.config/kak/kakrc<ret>'
map global user -docstring 'clean tabs and trailing whitespace in selections' c ':clean-selections<ret>'
map global user -docstring 'clean tabs and trailing whitespace in the buffer' C ':clean-buffer<ret>'
map global user -docstring 'jump to line' j ':jump-to-line<ret>'
map global user -docstring 'qalc mode' q ':enter-user-mode qalc<ret>'
map global user -docstring 'repl mode' r ':enter-user-mode repl<ret>'
map global user -docstring 'spell mode' s ':enter-user-mode spell<ret>'
map global user -docstring 'zenity mode' z ':enter-user-mode zenity<ret>'

# Allow writing in *grep*
# ───────────────────────

source "%val{config}/grep-write.kak"

# Extra git configuration
# ───────────────────────

source "%val{config}/git.kak"

# Syntax highlighting tweaks
# ──────────────────────────

source "%val{config}/syntax.kak"

# kak-lsp configuration
# ─────────────────────

source "%val{config}/lsp.kak"

# TMUX specific configuration
# ───────────────────────────

hook global ModuleLoaded tmux %{ source "%val{config}/tmux.kak" }

# Load local Kakoune config file if it exists
# ───────────────────────────────────────────

evaluate-commands %sh{ [ -f $kak_config/local.kak ] && echo "source $kak_config/local.kak" }

# Set the color scheme at the end because of the LSP defined fonts
# ────────────────────────────────────────────────────────────────
colorscheme nord
