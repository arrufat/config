snippet_support = false
verbosity = 0

[server]
timeout = 1800

[semantic_tokens]
faces = [
    # values
    {token = "number", face = "value"},
    {token = "enumMember", face = "value"},
    {token = "enumMember", modifiers = ["declaration"], face = "value_declaration"},
    {token = "keywordLiteral", face = "value"},

    # types
    {token = "type", face = "type"},
    {token = "class", face = "type"},
    {token = "enum", face = "type"},
    {token = "struct", face = "type"},
    {token = "type", modifiers = ["declaration"], face = "type_declaration"},
    {token = "class", modifiers = ["declaration"], face = "type_declaration"},
    {token = "enum", modifiers = ["declaration"], face = "type_declaration"},
    {token = "struct", modifiers = ["declaration"], face = "type_declaration"},
    {token = "typeParameter", face = "type_declaration"},

    # variables
    {token = "variable", face = "variable"},
    {token = "variable", modifiers = ["declaration"], face = "variable_declaration"},
    {token = "parameter", modifiers = ["declaration"], face = "variable_declaration"},
    {token = "property", face = "property"},
    {token = "property", modifiers = ["declaration"], face = "property_declaration"},

    # modules
    {token = "namespace", face = "module"},

    # functions
    {token = "function", face = "function"},
    {token = "function", modifiers = ["declaration"], face = "function_declaration"},
    {token = "method", face = "method"},
    {token = "method", modifiers = ["declaration"], face = "method_declaration"},

    # strings
    # {token = "string", face = "string"},

    # keywords
    {token = "keyword", face = "keyword"},

    # operator
    {token = "operator", face = "operator"},

    # attributes
    {token = "attribute", face = "attribute"},

    # comments
    {token = "comment", face = "comment"},
    {token = "comment", modifiers = ["documentation"], face = "documentation"},

    # meta
    {token = "macro", face = "meta"},
    {token = "dependent", face = "meta_member"},

    # builtins
    {token = "builtin", face = "builtin"},

    # other
    {token = "concept", face = "concept"},
    {token = "regexp", face = "regexp"},
    {token = "label", face = "label"},
]

[language_ids]
c = "c_cpp"
cpp = "c_cpp"
javascript = "javascriptreact"
typescript = "typescriptreact"

[language_server.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_flags.txt", "compile_commands.json", "meson.build", "CMakeLists.txt", ".git"]
command = "clangd"
args = ["--clang-tidy", "--compile-commands-dir=build", "--suggest-missing-includes", "--background-index", "--completion-style=detailed"]

[language_server.jedi]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git"]
command = "jedi-language-server"

[language_server.ruff]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git"]
command = "ruff-lsp"

[language_server.gopls]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git"]
command = "gopls"

[language_server.html-language-server]
filetypes = ["html"]
roots = ["package.json"]
command = "vscode-html-languageserver"
args = ["--stdio"]
settings_section = "_"
[language_server.html-language-server.settings._]
quotePreference = "single"
javascript.format.semicolons = "insert"

[language_server.typescript-language-server]
filetypes = ["javascript", "typescript"]
roots = ["package.json", "tsconfig.json", "jsconfig.json", ".git"]
command = "typescript-language-server"
args = ["--stdio"]
settings_section = "_"
[language_server.typescript-language-server.settings._]
quotePreference = "double"
typescript.format.semicolons = "insert"

[language_server.latex]
filetypes = ["latex"]
roots = [".git", "Makefile"]
command = "texlab"

[language_server.rust-analyzer]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rust-analyzer"

[language_server.zls]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"
settings_section = "_"
[language_server.zls.settings._]
semantic_tokens = "full"
warn_style = true

