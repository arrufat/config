snippet_support = false
verbosity = 0

[server]
timeout = 1800

[semantic_tokens]
faces = [
    # values
    {token = "number", face = "value"},
    {token = "enumMember", face = "value"},
    {token = "enumMember", modifiers = ["declaration"], face = "value_declaration"},
    {token = "keywordLiteral", face = "value"},

    # types
    {token = "type", face = "type"},
    {token = "class", face = "type"},
    {token = "enum", face = "type"},
    {token = "struct", face = "type"},
    {token = "type", modifiers = ["declaration"], face = "type_declaration"},
    {token = "class", modifiers = ["declaration"], face = "type_declaration"},
    {token = "enum", modifiers = ["declaration"], face = "type_declaration"},
    {token = "struct", modifiers = ["declaration"], face = "type_declaration"},
    {token = "typeParameter", face = "type_declaration"},

    # variables
    {token = "variable", face = "variable"},
    {token = "variable", modifiers = ["declaration"], face = "variable_declaration"},
    {token = "parameter", modifiers = ["declaration"], face = "variable_declaration"},
    {token = "property", face = "property"},
    {token = "property", modifiers = ["declaration"], face = "property_declaration"},

    # modules
    {token = "namespace", face = "module"},

    # functions
    {token = "function", face = "function"},
    {token = "function", modifiers = ["declaration"], face = "function_declaration"},
    {token = "method", face = "method"},
    {token = "method", modifiers = ["declaration"], face = "method_declaration"},

    # strings
    # {token = "string", face = "string"},

    # keywords
    {token = "keyword", face = "keyword"},

    # operator
    {token = "operator", face = "operator"},

    # attributes
    {token = "attribute", face = "attribute"},

    # comments
    {token = "comment", face = "comment"},
    {token = "comment", modifiers = ["documentation"], face = "documentation"},

    # meta
    {token = "macro", face = "meta"},
    {token = "dependent", face = "meta_member"},

    # builtins
    {token = "builtin", face = "builtin"},

    # other
    {token = "concept", face = "concept"},
    {token = "regexp", face = "regexp"},
    {token = "label", face = "label"},
]

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_flags.txt", "compile_commands.json", "meson.build", "CMakeLists.txt", ".git"]
command = "clangd"
args = ["--clang-tidy", "--compile-commands-dir=build", "--suggest-missing-includes", "--background-index", "--completion-style=detailed"]

# pip install --no-cache python-lsp-server python-lsp-black python-lsp-ruff pyls-isort pylsp-rope pylsp-mypy
[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]

# command = "pyright-langserver"
# args = ["--stdio"]

command = "pylsp"
settings_section = "pylsp"
[language.python.settings.pylsp]
pylsp.plugins.jedi_completion.include_params = true
pylsp.plugins.pycodestyle.enabled=false
pylsp.plugins.mccabe.enabled=false
pylsp.plugins.pyflakes.enabled=false
pylsp.plugins.black.enabled=true
pylsp.plugins.black.line_length=99
pylsp.configurationSources=["ruff"]
pylsp.plugins.ruff.enabled=true
pylsp.plugins.ruff.ignore=["E402"]
pylsp.plugins.ruff.lineLength=99

[language.cmake]
filetypes = ["cmake"]
roots = ["build"]
command = "cmake-language-server"
args = ["buildDirectory", "build"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "vscode-html-languageserver"
args = ["--stdio"]

[language.javascriptreact]
filetypes = ["javascript"]
roots = ["package.json", "tsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]

[language.typescriptreact]
filetypes = ["typescript"]
roots = ["package.json", "tsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]
settings_section = "_"
[language.typescriptreact.settings._]
quotePreference = "double"
typescript.format.semicolons = "insert"

[language.latex]
filetypes = ["latex"]
roots = [".git", "Makefile"]
command = "texlab"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rust-analyzer"

[language.zig]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"
settings_section = "zls"
[language.zig.settings.zls]
semantic_tokens = "full"
warn_style = true

[language.sh]
filetypes = ["sh"]
roots = ["."]
command = "bash-language-server"
args = ["start"]

[language.vala]
filetypes = ["vala"]
roots = ["meson.build", "compile_commands.json"]
command = "vala-language-server"
