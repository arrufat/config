snippet_support = false
verbosity = 2

[server]
timeout = 1800

[semantic_tokens]
faces = [
    {token = "variable", face = "variable"},
    {token = "parameter",face = "parameter"},
    {token = "function", face = "function"},
    {token = "function", face = "function_declaration", modifiers = ["declaration"]},
    {token = "method", face = "method"},
    {token = "method", face = "method_declaration", modifiers = ["declaration"]},
    {token = "property", face = "property"},
    {token = "property", face = "property_declaration", modifiers = ["declaration"]},
    {token = "class", face = "type"},
    {token = "class", face = "type_declaration", modifiers = ["declaration"]},
    {token = "enum", face = "type"},
    {token = "enum", face = "type_declaration", modifiers = ["declaration"]},
    {token = "enumMember", face = "value"},
    {token = "enumMember", face = "value_declaration", modifiers = ["declaration"]},
    {token = "type", face = "type"},
    {token = "type", face = "type_declaration", modifiers = ["declaration"]},
    {token = "dependent", face = "meta_member"},
    {token = "namespace", face = "module"},
    {token = "typeParameter", face = "type_parameter"},
    {token = "concept", face = "concept"},
    {token = "macro", face = "meta"},
    {token = "comment", face = "comment"},
    # zig specific
    {token = "builtin", face = "meta"},
    {token = "field", face = "property"},
    {token = "keywordLiteral", face = "value"},
    {token = "comment", face = "documentation", modifiers = ["documentation"]},
]

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_flags.txt", "compile_commands.json", "meson.build", "CMakeLists.txt", ".git"]
command = "clangd"
args = ["--clang-tidy", "--compile-commands-dir=build", "--suggest-missing-includes", "--background-index", "--completion-style=detailed"]
offset_encoding = "utf-8"

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pylsp"
settings_section = "pylsp"
[language.python.settings.pylsp]
pylsp.plugins.pycodestyle.enabled=false
pylsp.plugins.mccabe.enabled=false
pylsp.plugins.pyflakes.enabled=false
pylsp.plugins.black.enabled=true
pylsp.plugins.black.line_length=99
pylsp.configurationSources=["ruff"]
pylsp.plugins.ruff.enabled=true
pylsp.plugins.ruff.ignore=["E402"]
pylsp.plugins.ruff.lineLength=99

[language.julia]
filetypes = ["julia"]
roots = ["Project.toml", ".git"]
command = "julia"
args = [
    "--startup-file=no",
    "--history-file=no",
    "-e",
    """
        using LanguageServer;
        using Pkg;
        import StaticLint;
        import SymbolServer;
        import REPL;
        env_path = dirname(Pkg.Types.Context().env.project_file);
        server = LanguageServer.LanguageServerInstance(stdin, stdout, env_path, "");
        server.runlinter = true;
        run(server);
    """,
]
[language.julia.settings]
# See https://github.com/julia-vscode/LanguageServer.jl/blob/master/src/requests/workspace.jl
# Format options. See https://github.com/julia-vscode/DocumentFormat.jl/blob/master/src/DocumentFormat.jl
# "julia.format.indent" = 4
# Lint options. See https://github.com/julia-vscode/StaticLint.jl/blob/master/src/linting/checks.jl
# "julia.lint.call" = true
# Other options, see https://github.com/julia-vscode/LanguageServer.jl/blob/master/src/requests/workspace.jl
# "julia.lint.run" = "true"

[language.cmake]
filetypes = ["cmake"]
roots = ["build"]
command = "cmake-language-server"
args = ["buildDirectory", "build"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
offset_encoding = "utf-8"

[language.latex]
filetypes = ["latex"]
roots = [".git", "Makefile"]
command = "texlab"
offset_encoding = "utf-8"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rust-analyzer"

[language.zig]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"
settings_section = "zls"
[language.zig.settings.zls]
semantic_tokens = "full"
warn_style = true

[language.sh]
filetypes = ["sh"]
roots = ["."]
command = "bash-language-server"
args = ["start"]

[language.vala]
filetypes = ["vala"]
roots = ["meson.build", "compile_commands.json"]
command = "vala-language-server"
